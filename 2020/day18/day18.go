package main

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"
)

func main() {

	// var inputTest01 = `2 * 3 + (4 * 5)`                                 // becomes 26.
	// var inputTest02 = `5 + (8 * 3 + 9 + 3 * 4 * 3)`                     // becomes 437.
	// var inputTest03 = `5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))`       //  becomes 12240.
	// var inputTest04 = `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2` //  becomes 13632.
	// fmt.Println(evaluateFullExpression(inputTest01, false))
	// fmt.Println(evaluateFullExpression(inputTest02, false))
	// fmt.Println(evaluateFullExpression(inputTest03, false))
	// fmt.Println(evaluateFullExpression(inputTest04, false))

	part1 := evaluateFullHomework(parseInput(input), false)
	fmt.Println("Part1:", part1) // 12956356593940
	if part1 == 12956356593940 {
		fmt.Println("PART11111RIGHTRIGHTRIGHT")
	} else {
		fmt.Println("PART11111WRONGWRONGWRONG")
	}

	// var inputTest11 = `1 + (2 * 3) + (4 * (5 + 6))`                     // still becomes 51.
	// var inputTest12 = `2 * 3 + (4 * 5)`                                 // becomes 46.
	// var inputTest13 = `5 + (8 * 3 + 9 + 3 * 4 * 3)`                     // becomes 1445.
	// var inputTest14 = `5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))`       // becomes 669060.
	// var inputTest15 = `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2` // becomes 23340.
	// fmt.Println(evaluateFullExpression(inputTest11, true))
	// fmt.Println(evaluateFullExpression(inputTest12, true))
	// fmt.Println(evaluateFullExpression(inputTest13, true))
	// fmt.Println(evaluateFullExpression(inputTest14, true))
	// fmt.Println(evaluateFullExpression(inputTest15, true))

	// for _, line := range parseInput(input) {

	// 	fmt.Println(line, "\n", findInnerAdditions(line))
	// }

	part2 := evaluateFullHomework(parseInput(input), true)
	fmt.Println("Part2:", part2) //94240699046756 is wrong? //94240043727614
	// Currently not working due to refactor??????
	if part2 == 94240043727614 {
		fmt.Println("PART2222222RIGHTRIGHTRIGHT")
	} else {
		fmt.Println("PART2222222WRONGWRONGWRONG")
	}
}

func parseInput(input string) []string {
	return strings.Split(input, "\n")
}

func evaluateFullHomework(expressions []string, additionsFirst bool) int {
	ans := 0
	for _, expression := range expressions {
		// fmt.Println("EVALLING EXPRESSION", expression, additionsFirst)
		tmpAns := evaluateFullExpression(expression, additionsFirst)
		// fmt.Println("EXPRESSION EVALUATED", tmpAns)
		ans += tmpAns

	}
	return ans
}

func evaluateFullExpression(expression string, additionsFirst bool) int {
	count := 0
	// fmt.Println("Evaluating Full Expression:", expression)
	for strings.ContainsAny(expression, "()") {

		expression = passthroughExpressionParenthesis(expression, additionsFirst)
		// fmt.Println("Parentesis", count, expression)
		// fmt.Println("Removing Parenthesis Expression updated:", expression)

		count++
		if count > 1000 {
			panic("loopy")
		}
	}

	return evaluateExpression(expression, additionsFirst)
}

func evaluateExpression(expression string, additionsFirst bool) int {
	// assuming no parenthesis

	// if additionsFirst && containsAddition(expression) {
	// 	expression = evaluateAllAdditions(expression)
	// }

	expressionsSplit := strings.Split(expression, " ")
	runningTotal, _ := strconv.Atoi(expressionsSplit[0])
	for i := 1; i < len(expressionsSplit); i += 2 {
		nextVal, _ := strconv.Atoi(expressionsSplit[i+1])
		if expressionsSplit[i] == "+" {
			runningTotal += nextVal
		} else if expressionsSplit[i] == "*" {
			runningTotal *= nextVal
		} else {
			panic("qwe")
		}
	}
	return runningTotal
}

func evaluateAllAdditions(expression string) string {
	count := 0

	// fmt.Println("Evaluate all additions", expression)
	for containsAddition(expression) {
		expression = passthroughExpressionAdditions(expression)

		count++
		if count > 1000 {
			panic("Qwe")
		}
	}
	// fmt.Println(expression)

	return expression
}

func passthroughExpressionParenthesis(expression string, additionsFirst bool) string {
	innerExpressions := findInnerParenthesis(expression)
	for _, innerExpression := range innerExpressions {
		solvedExpression := evaluateExpression(innerExpression[1], additionsFirst)
		expression = strings.Replace(expression, innerExpression[0], strconv.Itoa(solvedExpression), -1)
	}
	return expression
}

func passthroughExpressionAdditions(expression string) string {

	innerExpressions := findInnerAdditions(expression)
	// fmt.Println(expression, innerExpressions)
	// for _, innerExpression := range innerExpressions {
	// 	solvedExpression := evaluateExpression(innerExpression[0], false)
	// 	expression = strings.Replace(expression, innerExpression[0], strconv.Itoa(solvedExpression), -1)
	// }
	// fmt.Println(expression)
	solvedExpression := evaluateExpression(innerExpressions[0][0], false)
	fmt.Println(innerExpressions[0][0], solvedExpression, strconv.Itoa(solvedExpression))
	expression = strings.Replace(expression, innerExpressions[0][0], strconv.Itoa(solvedExpression), -1)

	return expression
}

func findInnerParenthesis(expression string) [][]string {
	// Find brackets
	re := regexp.MustCompile(`\(([\d *+]+)\)`)
	return re.FindAllStringSubmatch(expression, -1)
}

func findInnerAdditions(expression string) [][]string {
	re := regexp.MustCompile(`\d+ \+ \d+`)
	return re.FindAllStringSubmatch(expression, -1)
}

func containsAddition(expression string) bool {
	matched, _ := regexp.MatchString(`\d+ \+ \d+`, expression)
	return matched
}

var input = `7 * (7 + (4 + 5) + 4)
2 * 6 + 7 * 3
5 * 5 + 8 * ((7 * 4 + 7 * 5 * 4) * 8 + 2 + 2 + 6 + 9) + 8 + 2
8 * 6 * 7 * 5 + ((5 * 7 + 5 + 4 * 3 * 5) * 7 + (3 + 3 + 3 * 2) * 7 + (4 * 3 * 4) + 3) * 9
7 * 4 * 8 + (2 + 5 * (8 + 9) * 7 * (9 + 8 + 4) + 8)
((2 * 9 + 2 * 7 * 3) + 8 * 3 * 5 * 6) + 5
6 + 5 * 6 * (9 * 9 * 8 + (5 + 5 * 3 + 8 * 3 + 7) * 6 + 6) + 5 + (9 * 8 + (2 + 3 + 2 + 2 * 3 * 9) + 7 * (8 + 3 * 3 + 3 + 5 * 7))
(5 * 4 * (5 * 9 + 6 * 8 + 4 * 3)) * 7 * 5 * 7 * (3 + 7 + 3 * 2 + 6) * (3 + 3)
((8 * 8 * 9 + 4 * 5 + 2) + 8) + 3
2 * 6 * 9 + (7 + 2 + 5 + (8 * 3)) * (9 * 6 * 9 * 9) * 5
9 + 6 + 5 * 2
4 + (5 * 6 + 6) + (3 * 3 + 8 + 8) + (5 + 4) + (9 * 8 + (6 * 4 * 2) + 5) * 6
4 + (2 + 6 * 4 + (7 + 9 * 5) * 3 + 6) * 4
6 * 9
((5 + 3) * 8 + 5 + 6) + 6
4 + 9 * 3 + 8 + 3 * (3 * (8 * 5 + 5 * 7 * 5 + 2) * 3 + 6 * (4 + 6 + 8) + 7)
8 + (4 + 2 * 2 * 2 + 5) + 2 + (7 * (7 + 7 + 7 + 7) + 7 + 2) * ((8 + 9 * 6 + 6 * 5) + 6 + 7 * 4 * (3 + 8 * 6 + 5 + 3 * 6) * 7) * 5
(4 * 7 + 4 + 6 + (6 * 5) * 6) * 6 * 8
4 * 3 + 9 + 2 * 4 * 2
5 + (4 * 3 + 8 + 6 * 7 + 9) * 2
4 * (3 + 3 + 6 + 4)
5 + (9 + (9 + 9 * 8 + 8) * 3) + 6 + 5 * 2
(8 * (3 + 2 * 5 + 5 * 4) * 6 * 3) + (2 * 8) * 6 * (3 * 8) + 9 * 4
5 * 4 + (2 * 7 + 7 * (4 + 3 * 3 + 5) + 9)
(4 * 6 * 5 + 5 * 3) * 2 * 5 * 6 * 4 + 9
6 * 8 + (7 + 4) + 5 * (3 * 9)
2 * 7 + 9 * 5 * ((7 + 4 + 2 * 6) * 3 + 5 + 4 + (8 * 9 * 4 + 3 + 7)) + 9
9 + 7 * (6 * 7 * 9 * 9 + 2) * (2 + 8 + 8) * 3 + 7
(8 * 8 * 3 * (9 * 8 + 3 + 2 + 3 * 5) + 4) + 3 + 2 + (8 + 6)
8 + 5 + 3 + 8 * ((2 * 8 + 7 + 7 * 4) + 7) + 8
9 * 3 * 2 + 6
2 * 9 + (9 * 5) * 5 + 3
4 * 7 * (7 * 6 * 8 + 8) * 6 * 4 + (8 * 2 * 5 * 4 * 5 * 3)
((6 + 9 + 9 * 4 * 2 + 5) + 8 + 6 * 4) * 3 + 7 * 2 + 9
3 * 7 + 9 + 7 * (5 * 2 * (6 * 9 * 6) + 9) * 4
3 + 5 + 3 * (6 * (4 * 2 + 9 * 7 * 4) * 7) + 5
2 + 6 + 2 * 7 + (9 + 2 * 4 * (9 * 3) + 8)
(9 * (9 * 7 + 2) * 4 * 7 * (9 * 4)) * ((2 * 9) + 6 + (7 * 7 * 4 * 4) * 4 + 5)
(2 + (8 + 8 * 7 * 2) * 7 * 3 * 7 * 6) + 3 + (7 + 6 + 4) + 4 + 4 + 9
((6 + 5 + 4 * 7) + 3 + 6) + 2 * 3 + 8 + 2 * 3
(4 * (8 * 7 * 7) * (4 * 4 + 9 * 4) + (5 + 4 + 4 * 9 + 9) * (4 * 9 + 2 + 2)) * 2
((2 * 3 * 8 * 3) * 4 + 8 * (2 + 6) + 9) + 5 * 7 + 6 + ((5 + 9) + 4)
8 + (4 * 8 + 5 + 7 * 9 + 4) * 9 + (6 * 7 * 2 + 7)
(2 * 5 * 9 * 2 + 5) + ((2 + 9) + 2 * (2 * 6 + 7)) + 6 + 8 * 5
4 + (4 * 6) + 7 * 3 + 6 + 3
(3 + 4 * 4 + 3 + 4) + 2 * 2
9 * 3 + 5 * (3 + 5 * 9) + 5 + (6 + 7)
6 * ((9 + 9 + 2 + 3 * 9 + 8) + 3 + 7 * (9 * 6 + 8 + 8)) + (8 * (6 * 2 * 6 + 9 * 5) + 8 * (9 * 3 * 4 * 9 + 2 + 9) * (3 * 7 + 2 * 8 * 2 + 9))
((9 * 3 * 4 * 9) + 7 * 3 + (6 * 8 * 6 * 5 * 6) + 8 * 3) + 4
9 * 8 + 5 + 3 + (9 * 8 * 3 + 4)
(8 * (9 + 5 * 8) + 9) + 5 + 4 * 7 + 6 * (6 + 7 + 4 * 2 + 8 + 8)
(8 * (7 + 3 * 9 * 5 * 6 + 8) * (6 * 9 * 3) * (3 * 8) * 2) + 4 + 7 * 7 * 8 * 8
(8 * 9) * 6 * 8
((4 * 9 * 5) * 3 * 9) * 7
(9 + 4) * (5 * (9 * 4 * 5 * 2 * 2) * 2 * (4 + 2) + 6 + 6) * (8 + 9 + 5 + 6)
(3 * 4) * (8 * 3) + 5 * ((9 * 7 * 9 + 2) * 9 + (9 + 8) * 4 * (6 * 5 + 2 + 3 + 8 * 4)) * 4 + 8
9 * (2 * 5 * 3 + (2 * 9 * 8 * 2 * 2) + (2 * 6 * 2) * 5) * 3 + 5
9 + 4 * ((4 * 8 + 2 + 7 * 5) * 6)
9 + 3 * (5 * 4 + 7 + 9) + (4 * (4 * 8 * 8) * 7) + 9
(2 * 5 * 3 + 7) * 6 + 3 * 8 + (7 + 2 * 2) * 8
5 * 7 * (6 * 4 + 7 + 3 + 5 * 3) * (8 + 8 + (5 * 8 * 3 * 7 + 3) * 3 + (3 + 9 * 5) + 7) + (9 * (3 * 9 + 3 * 3) * 6 * 7 * 3) * 9
(6 * 2 + (9 * 7 + 6 + 8 + 7 + 6) * 8 * 8 + 2) + 3
4 + ((8 * 8 + 6 + 6) + (5 * 9 * 5 + 5) + (6 + 3 * 4) * 4)
4 + (9 * 4 + 6 + 7 + 5) * 2 * (4 + 7)
7 + 8 * 3 + (8 * (9 + 9 * 9 + 9 * 8 + 4)) + (4 + 9) * ((9 * 7) + 2)
4 * 4
(4 * (9 * 9) * 2 * 8 * 6) + 4 * (7 + 4 * 3 * 9)
(9 * 6) * 5 + ((2 + 4 * 2 * 5) * 5) * 2 + 5
8 * (7 * 4 * 6 + (2 + 6 + 9 + 7) * (4 + 7))
3 * 2 + ((8 * 5 + 8 * 4 * 7) * 8 + (7 + 5 * 6 * 5 + 4 * 5) + (8 + 7 + 2 + 3 * 2) + 2) + ((6 + 3 * 3) * 2 + (2 + 2 + 5 + 8 + 6) + 6 + 9) * 9 * 2
8 * (4 + (7 + 5 * 9)) + 7
5 * 5 + 7 + 2 * (6 * 3)
(4 * (9 + 6 + 5)) * 4 * 9 * 8 + 9 + 7
2 * (4 * 3 * 6)
(2 * 2 + 2 + 7 * 3 + 3) + (3 + (5 + 2 * 2 + 8 * 5))
(9 + 5) + 3 + 3 * 4
3 + 4 + 7 + (2 + 9 * 4 * 2) + 7
9 + 3 + 2 + (7 + (6 + 4 * 3) + 8 * 2 + 7 * 3)
((4 * 7 + 2 + 8 * 6 + 9) * 8) + 2 + 2 * 3 + (8 * 8 * 6 + 9)
(6 + 7 * 3) * 2 + 8 + (7 * 6 + 3)
3 + 5 + 7 * ((2 + 8 * 5 + 4 * 4 + 9) * 4 + (8 * 3 + 8 + 5 * 2) + (9 * 8 * 8 + 9 * 5) * (3 * 3 * 3 * 4 + 7))
(3 * 5 * (9 + 3 + 7 + 8 + 8 * 8) + (6 + 5 + 7 + 8 * 5) * 2 + 9) + 9
6 * 8 + 8 + (4 * (9 * 9) * 6) * 5
9 * 8 * 3 + (7 * 2 + 6)
2 * (3 * 9 * 5) * (2 + 4 + (3 * 2 * 4 * 9 * 9)) + 9 * ((3 * 6 * 4 * 6 + 5) + (9 + 2 * 5 + 5 + 5) + 9) + 5
3 * 8 + (6 * 3 * 9 + 3 * 2) + 4 * (3 * 3 + 2 + 7 + (2 + 6 + 8 * 7 * 9)) * 5
4 + (2 + 9 * 9 * 2 * 2) + 3 * 4 * 8
((6 * 6 * 5) + 4) + 9 + (6 * 3 * 4 + 6 * (6 * 6 * 4))
(6 * 7 * 9) * 4 + 8 * 6 * ((3 + 7 * 2 * 9) + 2)
6 + 5 * 2 * 6 * 2
(2 + 6 + 2 * 6 + 8) * 3 + (5 + 7 * 5) + 2 + 9
(2 + 5) * (4 + 3 + 2 * 5)
((7 * 2 + 9 + 8 * 2) + 3 + 3 + 7 * 3) * 3 + 8 * 3 * 2
9 * 9 * 5 + 7 * ((6 + 8 + 5 * 4) + 6)
7 * 2 + 3 * (2 * 2) * 8
7 * 3 + 2
7 * 4 + 7 + (3 + (9 + 3 * 4 + 5 + 8 * 9))
3 * 8 + 6 + 5 * (9 + 8 * 9 * 3 * 8) * 5
3 * (2 * 6 * (7 * 2 + 4 * 9) + (3 + 9 * 9 + 4) + 7) + 7 + (4 + (3 * 8 + 7 + 6 + 5)) * 6 + 5
(9 + 4) * 8 + 6 * 8 * 7 + 7
6 + 6 + (5 + 7 + 5) + 2 * 8 * 9
2 * (2 + 4 * (4 + 7 + 4 * 8 * 7 * 3)) + ((5 + 4 * 9) * 4) * 4 + 5 + 5
2 * 6 * 7 * (5 * 7 * (8 * 8 + 6) + 7 * (3 + 4 + 2 * 9))
((9 * 6 + 4 + 8 + 7 * 6) + 6) + 4 * 2
8 + (8 + (5 * 6 + 8 * 2 * 5 + 3) + 5) + 7 * 2 * (4 + 6 + 3 + 7) + 6
6 * 6 + 4 * 5 * (2 * (3 + 9 * 3 + 6) + (3 + 8 + 4 + 3 * 3 * 7) + 4 + (5 * 5 + 2 * 8 + 7))
(9 * 8 + 6 * 8 * 2) * 4 * 3 + 9 + 3 * (2 + 3)
6 * 2 * 9
2 * 4 * 8
9 + (5 + 3 * (5 * 6 * 8 * 7) * (7 * 3 * 7 + 2 * 2 + 7) + 9 * 2) * 6
7 * 3 + 4 * (4 * 2 * (3 + 8 + 5 * 6 + 2 + 6) * (5 + 7) + (3 + 5 * 4 + 2 + 2 + 6) * 6) * (8 + 5 * 5 + 4 * 6)
5 + (4 + 9)
8 * (3 + 9 * 5) + 3 + 7 * 3
(2 + 5 + 7 * 8 + 4) * (6 + 7) + 5 * 6 * 2
((9 + 8 + 5 * 8 * 4 + 7) * 6 + 9) * 3 * 7
4 * ((6 + 6 + 4 * 5 * 7) * 6 * 2 + 5 + 3 + 7) * 7 + 3 * 6 + 3
6 * 7 * 4 * 7 * 3
2 + 4 * 5 * 4 + (9 + (9 * 7) + 4 * 6) * 3
(2 + 9 + 7 * 3 * (5 + 5 * 7 + 3) * 4) * 6 * 2 * 9
(6 * 2 * 2 + 3 * 7) * (4 + 8 * 6 + 5 + 2) + 4 + 6
5 + (4 + 6 + (9 * 5 + 6 + 5 * 2) + 4) + 4 * 8
3 + 6 + ((4 * 4 * 6 * 7 + 6) * 5 * 3 * 7) * (3 * 8 + 6 + 8 + 5) + 8
3 * 8 + (4 + (9 * 5 * 3 * 9 + 7 + 5)) + 2
4 * 9 * 2 * 4 + 4 * 8
(6 + 2 * (5 * 5 + 2 * 3) * 5) * 7 + (2 + 2 + 2)
7 * (3 + 3 + 9) * 7
8 * 7 + (4 + 9 + 6 * 6 + 3) * (2 * 2 * (9 * 2 * 6))
8 + (6 + 2 + 9 + 2) + (5 + 7) * (6 + (8 * 6 + 9 + 8 * 6) + 7 + (2 + 2 + 9 * 3) * 4 + 4) * ((6 * 3 * 3 * 6 * 2) * (5 * 2 + 4) + (4 * 4 + 7 + 6 + 4 * 3) * 9) + 9
((5 + 2 + 6 * 3 * 7 * 2) * 7 * 3 * (8 * 4 * 2 * 6 * 5) * 8 * 7) + 8 * 8 * 9 * 6
4 + 9 + (9 + 8 * 9 + 5 + 3) * 7 + 6 * 9
7 + 9 * (5 * 5 + 9 * 2 * 3 * 5) * 5 * 9
((3 * 9 * 2 + 2 * 4) * 7) * 7 * 9
3 * 5 + 5 + (3 * 9 * 7 * 6 + 8 + (4 * 6 + 7 + 8 * 5)) + 8 * 4
9 * 9 + 5 + 2
(7 * 8 + 6 + 5) + 7
(5 * 2 + 2 + 7) * 2 * (8 + 4 + 9 * 6) * 2 * (8 + 6 * 3 * 3 + 9)
6 * 2 + 5 + (8 + 8 * 6 + 9)
3 + (2 + 7) + (4 + 4 * 4) + 5 * (9 * 4 * 4 * 3 + 5 + 8) * (5 * (8 * 9 + 9 * 7 * 4) + 3 * 9 * 2)
6 * 4
2 + 7 + 5 * (8 + 2 * 2 * 6 * 6 + (5 * 6 + 9 + 6 * 6))
7 * ((8 + 9) + (7 * 8 * 5 * 3 * 2) + 4) + 7 * 6
2 + (8 + 3 * 6 * (5 * 9 + 9 + 8 * 8 * 2) * 5 + 5) + 5 + 3
((5 + 5 + 2 * 8) + 6 + (3 * 9 * 3 * 9 + 8)) + ((2 + 4 + 7 * 9) + 9 * 5 + 2 + 9) * 5 * 5 + (9 + 4) * 9
6 + (7 + 7 + 4 * 5 + 5) * (3 + (5 * 5 + 4) + (6 * 2 * 9 * 3 + 4)) * 4
2 + 2 * (8 * 6 + 5 * 9 + 7 * 3) * 2
(2 * 7 * 2 * 2) * 4 * 4
(3 + 5 * (4 + 2 * 7 * 4 + 4 + 9)) + 7 + 7 * 8 + 2 * 5
(7 + 4 * 6 + 3 + (7 + 5 + 3 + 2 * 4) + (6 + 9)) + 6 * 8 * 7 + 4 * 9
4 + 2 + 8 * 3 + 5 + (6 * 5 + 7)
(6 + 9 + 9 + 8 * 3 + 2) + 8 * 7
5 * 9 + 7 + 5 * (2 * (9 * 5 * 2 * 9 + 9) * 5 * (7 * 5 * 2) * 9 * 6) + 4
(7 + 2) + 3
4 * 7 * 3 * (8 * 7 + 4) + 6 + (2 + 7 * 2 + (3 * 4 + 4 + 2 + 2) * 4)
8 + (9 * 9 + (9 * 9)) * 9 * 9 + 6 + 9
(2 * 8 * (2 * 6 + 2) * 9) * 3 + (4 * (9 + 6 * 9 + 6)) * 9 + 2 + 3
8 + (2 + 4 + 5 + 7 * 2) * 7 * 5 + 8 + 9
4 + 3 + (6 + (3 + 5 + 2 + 2 * 4) + (6 * 8 * 6 * 7 + 7 + 2) * 9 * 7 * 7)
((6 * 4 * 7) + 5 + 8 + 8 + 6) * 6 + 9 + 3
4 + 4 + (5 + 7 * 9 + 9 * (4 * 4 * 4 + 6 * 2 * 5))
5 + (9 * 3 + 2 + 9 + (3 + 9 * 4 * 7)) * (7 + 8) * 8 + 3 * (6 + 2 * 4 + 2 * 5)
7 + (9 * 4 * 3 * 4 + (7 + 3 * 4 + 8 * 5)) + 8 + 8 + 6
3 + 3 * 7 + (5 * 8) + (6 * (8 * 7)) + 7
6 * (2 * 9 * 9 + 6 + 3) * (5 * 9 * 7 + 4 * 6 + 7) + (4 + 4 * (4 * 3 + 5))
2 + 9 + 7 + (2 + 8 + 8) + 5 + 9
4 * 6 * (3 + 8 + 2 * 4) + 7 + 5 + (3 + 9 + 3 + 3 * 5)
8 + ((5 + 5) + 2 + 3)
(9 + 2 + 4 + 7) + (4 * 7 + 3 + 4) * 9 + 6
8 + 5 * (9 + 9 * 4) * 6 * 4 + (8 * 2 * 3 + 7 * 7)
8 + (2 + (3 * 5 + 7 * 3) * 8 * 9 * 2) * (6 + 5 * 2 + 9) + 3 * 8 + 7
3 * (5 * 6 + 3 * 7) + 6 + 8
6 + (5 * 9 + (4 + 9 + 9) * 6 * (8 + 5 * 7) * 5)
4 + (3 + 8) + 8 * 9 * (3 * (6 * 9 + 7 * 9 + 8 * 5)) + 6
(2 + 5) * 4 * 6 + ((2 * 4) * (9 * 6 + 8) + 7) * 9 * 6
7 * 4
4 * 8 * 9 + (6 * 4 * 6 + 5 + 7) * 3 * (4 * 5 + 9 + 6 * 5)
6 + (5 + 4 * 3 + 8 * 3 * (9 * 4 + 7 * 2)) * 6 + 5 + 5
4 + 8 * 7 * 2 + 2
((9 * 6 + 2 + 8 * 2 + 9) + 7 + 3 * 9 * 6 + 9) * 4
5 + 7 * 8 + (2 * 3 * (3 + 3) + 8 + 3)
3 * (8 * 2 + 3 + 3 + 6 + 2)
8 + 7 * 6 * 2 * (5 + 5 + 4) * 6
(3 * (8 * 2 * 9 * 8) * 6) + 3 * ((9 + 7 * 7 * 9 * 2) + 2 + 2 + 4 + 6 + 9) * 9 * (9 * 6 + 7 + 3 * 8) + (4 + (4 * 7 + 5))
3 * ((9 + 2 + 6) * 3 * 9 + 9 * (8 + 4))
((4 * 2) * (6 * 7 + 6 + 5 * 2 + 2) + 6) * 9 + (5 * 6 * 8 * 5 * (2 + 6 * 9 * 2) + 6) + 7 * 6 + (8 * 5 + 9 * (2 + 6) + 8)
(6 * (3 * 9 + 5 + 7 * 4) + (5 + 8 * 7 * 5 * 8) * 6 + 2) + 2 + 2 + 6 * 5 + (3 + 6 + 3 + 9 * 9 + 8)
6 * 4 * (4 + (9 + 9 * 3 * 3)) + 5 + 7
7 * (5 * 8 + 3) * 8 + 6
6 + 5 + 4 + (2 * (6 * 3 * 5 + 8 + 6) * 7 + 9 * 3) + (2 * 8 * 2 + 7)
7 + 9 * 8 * 8 * (2 + (5 * 7 + 2) + 7)
7 * (2 + 4 + 3 + 7 + (3 + 5) + (7 * 5 * 7 * 9 * 4)) + 2
8 * 2 * (8 * 8 + (3 + 2 * 9 + 6) * 3 + 8 + (2 + 2)) * (9 * 4 + (4 + 8 + 5 * 2 + 8 * 6) + 2 + 9 * 6) * 7 * (6 + 8 + (9 * 5 + 3))
3 * (4 * 8 * 3 + 3 * 6)
7 * 7 * (8 + 9 * 4 * 7) + 6 + 3 * 8
7 + (5 * (7 * 3 * 5))
(4 + 3 + 9) * 9 + 7 * ((7 * 8 + 9 * 3) + 8)
6 + 8 + (3 + 7 + 7 * 2 + 9) * 5 * 9
((7 + 3 + 7) + 9 + 9 * 6) + 6 + ((3 + 6 + 8 * 6 * 7) * 2 + (7 * 5 + 8 * 8 * 7 + 7))
(6 * 4 + 6) * 9 * 2 * 8 + 2
8 + 6 + 9
8 + 9 + 9 + 9 + (3 + 3 + 5 + 9 + 3 * 9)
(9 + 4 + (7 + 6 * 3 * 9 + 2 * 2) * 7 * 8 * 7) * 3 + 4 + 7
3 + 3 * 6 + (5 + 9) + (2 * 9 * 7 * 3)
3 * 6 + 8 * 2 + 3
8 * (2 + (2 * 2 * 9 * 4 * 8 + 4) * 2 * 2) * 3 * 5
(3 + 9 + 4 * 5 + (7 * 6 * 6) * 9) + ((7 * 9) * 2 + 3 + 9 + 4) + 5 + (2 * 5 * 2 * 5) * 6 + 7
4 + (6 + 3 * 5 * 7) + 9 * 2 * (3 + 2 * 4 * 2 + (2 * 8 * 9 + 4))
4 + 3 * (8 + 4)
7 * 6
9 + 7 * (9 * 4 + 4 + 9 + 5 * 2)
(7 * 7 + 8) + 3 * 5 * 3
(6 + 7 * 2 + 5) * (4 + 5 * 6 * 3 * (4 + 4 * 5 * 2 + 6 * 2) + 4) + 9 * 7
(8 + 7 + 5 + 8) + 2 * (7 + 4 * 8 + (2 + 2 + 5 + 4 * 5 + 4)) + 6 + (3 * 5) + 3
3 * 7 * (9 * (2 * 4 * 3 * 8) + 5 * 4 * 5 + 8) * 4 * 4
7 + 4 + (9 * 3 + 4 * 5 + 4)
((5 * 5 * 4) + 9) * (3 * 6 * 6 * (9 + 8 + 7 + 4 * 3)) + 6
(8 + 9 * 8 * 7 * 5 * 6) * 6
7 + 2 + 5 * (8 * 7) * 9 * 4
3 * 4 * 6 * 4 * 6 + 6
9 * 4 * 7 * 8 + (7 + 4 * (2 + 5) + (8 * 9 * 6 + 4 + 8) * 7)
(7 + 6 * 6 * 7 * 3) * (4 * 7 * 6) + 8 + 9 + 7
7 + 9 * (4 * 9 * 2 * (7 * 6 * 7) + 3) + ((6 * 8 * 3 * 6 * 9) * 4 * 3 + 2 * (6 + 3))
7 + (2 + (3 + 4 + 5 + 6 * 7 * 2) + 7 + 3 * (2 * 6 + 3 + 9 * 7 * 9))
(6 * 5 + 8) + (4 * (8 + 9 + 6) * (7 + 6)) * 3 + 9
3 * 8 * (3 + 3 + 5) * 8
2 * (6 + 3 * (6 + 6 * 2) + 8 * (4 * 4)) + 9 + (2 * 3 * 8 + 2) * 7 + 6
4 * 4 + 5 * 5 * 5 * 6
2 * 8 + (5 + 8 + 6)
5 * (6 * 7 * (6 + 8 + 9) * 8 + (3 + 8 + 2 + 2 + 7)) * 4 + 3 * 5
((4 + 9 + 3 * 3 + 9 * 3) * 2 + 2 + (5 + 6) + 2) + (3 * 2)
6 + 2 * (7 * (2 * 6 * 7) + 8) * 2 * 3 * 3
2 * ((8 + 2) + 5 + 3 + 4) * 7 * 7 * (3 + 6 * 7)
(9 + 5 + 6 * 5 + (5 * 9 * 2 * 4 + 9) + (8 + 3 * 2)) + 7
(4 + 2 + (3 + 7 + 3 * 3)) * 9 * (9 * 2 * 6 * 4 * 4 * (4 * 9))
4 + (9 + 6 * 8 + (6 + 6 * 2) + 3) * (5 * (2 * 3 * 5 * 5 * 5) * 5 * 7) + (5 * 6)
5 * 4 + 4 * 9
(3 + 7 * 7) * ((2 * 4 + 8 + 2) * (9 + 7 + 7 * 8) * 4 + (8 + 4 + 2 * 4 * 5) + 8 + 6) + (9 + 8 * 6 + 4 + 2 + 5) * 6
(4 + 7 * 3 + 7) + (5 * 9) * 6 + 7
5 * 3 * (6 * 6 * 5 + (5 * 8)) * 8
((3 * 7) * 5 * 3) + 3 * 3 + 6
(8 + 8 + 3) * (7 * 9 * (6 * 6) + 7 * 5 + 6) + 6
3 * (3 * 7) * 5 * ((4 + 5) * 4 + (2 * 5 * 7 * 4 * 3) + 5)
(3 + 6 + 4 + 8) + 9 + (7 * 5 * 7 * 3 + 5 * 6)
6 * (3 + (3 * 8 * 6 + 3 + 5 * 9))
(5 * 6) * 4 * 4 + (3 + 4) * 7
7 + 2 * 9
5 + ((4 + 7 + 5 * 4 * 5) + 5 * 3 + 8 + (3 + 6 * 6 + 4))
3 * 7 + (3 + 4 * 9 + (6 * 5 * 4) + 7)
7 + (8 + 7 + 8 + 5 * 6) * 3 * 3
8 + ((8 + 3 + 9) * (3 * 4 + 7 * 4 + 3)) * 9 + 9 + 8
6 + (7 * 7 + 8 + 2 * 4) * 6 * (8 + 8 * 7 + 5 + 5 * 6) * 2 + 9
4 * 2 + 4 * (8 + 6 * (3 * 9 * 6) * 8 * 8 + 7) * 5
((6 * 2 + 2 + 2 * 8) + 3 + 4 + 9 * 9 + 6) * 8 + 3
(4 + 2 * 5 * 3 + 5) * 7
5 + 8 * (2 + 9 * 5 + 4 + (3 + 4 * 6) + 3) + 4 + 7
4 + 5 * 3 * (9 * 7)
4 + (2 + (4 * 9 * 6) + 7 * 9 * 9 + 2) * (2 + 8 * (4 + 4 * 5 + 4 * 2)) * 3
((6 + 7 + 2 * 7 * 3) * 7 + (7 * 7 + 5 + 3 + 6) + 2) + (4 * 5 + 3 + (7 * 9 * 2 + 8 * 9) * 9) + 5 * 7
6 + 2 + (6 * 9) + 3
3 + 3 + ((7 * 6 + 8) * (6 + 5 * 5 + 8) + 5 + (7 + 9) + 4 + 4)
6 * 7 * 8 + (5 * 5 + 9 * 7 * 8 + 4) + 4
(6 + 4 * 8 * 6) * (4 * 6) + 7 + 8 * 8 * (9 + 4 + 4 * 6 + 7)
3 * 5 * (9 + 3) + 9 * 4 + 6
(5 + 4 + 5 + 6) * (5 + 5 * (4 * 7 * 4 + 7) * 2 + 3 + 8) + 9
6 * 6 + (9 * 2 * (2 + 8 + 3 + 7 * 2) * (6 + 2 * 2))
7 + 4 * (9 * 4 * 9 * 9) + 9 + (5 + 8 * (6 * 7 * 7 + 2 * 5 + 8)) * 2
((8 * 2) * 8 + 8) * 8 + 3
8 + 8 + ((6 * 2 + 5) + (3 + 9 * 3 * 6)) * 6 * 8
3 + (2 * 3 * 2 * 6 + 3) + 3
(4 + (7 * 9 + 9 + 2) + (6 + 4 * 8) + 2) + 6 * (7 + 8 + 6 + 2 * 3 + 8)
5 * 6 + (3 * (7 + 7 * 6)) * 6 * 7
(6 + 6 + 6 * 4) * 3 + 3 + ((4 + 8 + 8 + 2 + 3) + 7 * 4)
6 * 8 * (5 * 8 + 9 + 9 + 9 + 4) * 2 * 2 + 9
9 + 8 + (6 * 7 + 4 * 6)
4 * 9 + (3 + (7 + 8 + 5) + 9 * 4)
2 + (4 + 7) + 3 * 3
2 + 4 + ((5 * 7 + 6 + 7 * 3) + 7 * (8 + 6 * 4 + 7 + 5) + 3 * 4 + 9) * 8 + 6 * 7
5 + 2 * (5 * 3 * 7 + (3 + 7) + (6 + 4))
(3 * 9 * 7) + ((6 + 7) + (5 + 2 * 4 * 7 * 3)) * 8 + 8
9 * 5 * 4 * (5 + 4 + 5) + 2
(6 * 9) + ((7 + 2 * 6 + 5 * 5 + 5) * 4 + 7) + (5 + 7 + 5 + 3 * 9 * 5)
(3 * 3 * 2 * 6 + (6 + 6 * 4 * 7 * 5) + 5) + 8 + 3 + 5 * 5
((9 * 3) * (5 + 9 + 2) + 5) + 4 + 3 + (8 + 7) + 7 + 9
(4 * 9 * 2 * (9 * 9 * 2 * 6 + 4) * (8 + 9 * 4 * 6 * 3) * (3 + 6 + 4)) * 5 * (2 * 2 * 2 * 7 + 5) + 2 + 5
(6 + 4 * 9 * 6 + (5 + 3 + 9 * 6)) + 5 * 3
3 * (8 + 7 * 8 + 6 * 7) * (5 + 2 + 6 + (2 + 7 + 5)) + 3 * 5
4 + 8 * 6 * (8 * 9) + 9 + (3 + 9 + 2 + 2 + 3 * 4)
5 + (6 + 5 + 2 + 8) + 6 + 4 * 6
9 + ((7 * 9 * 7 * 9 * 5) * 8) * 9
3 + 6 + (9 + 3 + 7 + 7 * 8) + 5 + 7 * (8 * 5 * 8 * (4 * 8 * 8 * 9 * 9 * 7))
5 * 2 * 4 + 7 + 7
3 * (8 * (4 * 8) + (5 * 5 * 8 + 9 * 9 * 3) + 9 + 6 * 5) * (4 * (5 + 7 * 6 + 6 * 3) + 6 + 3) + 4 * 4 + (6 + 3 * 7 + 3)
4 + 4 + 2 + 3 * ((5 * 6 * 7) * 8 + 6 * (9 * 8 * 3 + 8 * 3 + 6) * 8)
8 + ((5 + 2 + 9 * 3 + 8) + 3 * (6 + 9 * 5 + 6) * 8 + 2)
(8 * 6 + 3 + 5) * 4 + 4 * 7 + (3 * 5) + 6
3 + (8 + (4 + 9) * (3 + 5 + 9 * 2 + 6) + 9 + 8) * 4 + 6 * 9
2 + 3 + 8 + ((8 * 6 * 5 * 2) + 9 * (4 + 5 + 6 + 7 * 3 * 7) + 7 * 3) * 2
(3 * 6 + 3) + 6 * 5 + 7 + 2 + 4
6 + (5 + 6 * 2 + 3) * 7
4 + (9 + (6 * 7) * 3 * 9 + 6)
9 * 4 * 6 * 5 + (7 * 6 * 9 * (8 * 3 * 6 * 4 + 2 + 7) * (8 * 5 + 3 * 6 + 3))
(9 + (4 * 3 + 8 + 2 * 3 * 7) + 7 + (6 * 9 + 9 + 7 * 5 * 6) + 3 + 9) * 6 * 3 + 2 + 7
5 * 2 * 9 + (4 * 8 * 5 + (2 + 3 + 3 + 8 + 6) + 8) + 3 + 4
4 + 5 * (5 + 4 * 9 * (9 + 6 * 4)) + 3 + 6 + 4
9 + 4 * (5 * 8 + (8 + 7 + 4 * 8 + 2)) + 5 + 2 * 6
2 * 8 + (4 * (2 + 2 * 3 + 2 + 2) * (4 + 9 + 5 * 7) * 2 * (5 + 7)) + ((8 * 8) * (2 + 9 + 6 + 8 * 6)) + 6 + (7 + (5 + 2 + 9 * 6) + 7 * 7 * 6 * 5)
4 * 8 + 8 + (5 * 3 + 2 + 2 * 7 * 3)
7 * 5 + 2 * (8 * 7 * 6 + (8 * 7) * 4 + 2) * 7
2 + 6 * ((5 + 7 + 2 + 7 + 8) * 9 + (8 + 4) * 2)
(2 + 7 * 3 * (9 * 8 * 3 * 2 + 7 * 2) * 5 * 9) * 7 * 9 * 5 * 4 + 8
6 * 6 * 4 + (9 * 7 * (2 * 5 * 4 + 8 + 2) + 4 + 3) * 3
2 + 7 * 4 * (4 * (9 + 5 * 6)) + 7
6 * (2 * 3 * 9 * 2 * 4 + (7 + 7 + 5 * 6 * 3)) * 3 * (8 + 6) + (8 * 9 * (5 + 6 + 4 + 3 * 3 * 4) * 2) * 5
(8 + (8 + 6)) * 6 + 2
9 + ((8 + 5 * 3 * 2) + 4 * 6) + 8 + 4 * 5 + 3
4 * 3 + 4 + (6 * 8 + (6 + 3 * 9) + 8 + (3 + 6 * 3) + (7 * 8 + 9)) * 4 + 7
7 + (8 + 6) + 8 + 6 * 9
(5 + (4 + 6) + 8 * 9 + (8 * 6 + 7 * 4 + 2) * 8) * 6 * 9
4 * 7 + (7 * 8 + 6 * 7 * 7) * (6 + 7 + 8 + (2 * 7 * 2 * 3 * 3))
((3 + 7 + 3 + 6 + 6 * 4) * (3 * 6 * 7 + 5 + 3 + 3) + 7 + 2 * (4 * 4 * 6 + 5) * 6) + 8
((2 * 3) + (2 + 2 + 3) + (2 + 5 * 4 * 4 * 2 + 5) * 4 * 6 + 2) + 5 + 5 + 5
8 * (5 * 9 + 5 + 4 + 3) * ((4 * 5 + 5 * 8 + 9 + 2) * (7 + 4 * 4 + 6 + 8)) + 6 + 9
(3 * 3 + 3 + (4 * 9) * 5) + ((9 + 3 * 6 * 9 * 4 * 5) * 8 + 3 * 5 * 3 + 7) + 4 * 3
(2 * 6 * 4 * 3 * 7) * (2 + (8 + 5 + 4 + 2 * 8) + (2 * 8 + 9 * 6 + 2 + 8) + 9 + 2 + 2) * 5 * (5 + 3 + 4)
9 * (8 + 6) + 7
5 + (8 + (2 + 2 + 3 * 2 + 8 + 3)) * 9 + (8 * 8 * 2) * (3 + 8 + 6 * 7 * 9 + 2) * (4 + 7 * 9 + 8)
((9 * 9 * 9) + (7 * 7 * 6)) + (5 * (8 * 4 * 4) + 3 + 2 + 5 + 6) + (5 * 9 * 8 + 2 * 2 * 5) + 8 * (7 * 2 + 8 + 3 * 3 + 3)
(4 * 8 * 5 * 7 * 6) + (2 + 2 * (5 * 7 + 8 * 2 * 3 + 5) * 9 * 9 * 5) * 2 + 4 * 6 + 9
(4 * 6) * (5 * 2 + (9 + 5)) + 7 + 8 * 2 * 3
((2 * 3 * 6 * 4 * 6 * 2) + 4 + 5 + (8 + 8 + 5) + 6 + (7 * 6 + 9 + 3 * 6)) + 2 * 9
5 + (2 + 2 * 5 * (3 + 6 * 6 * 2) * 5 * (7 + 4 + 3 * 2)) + 6 * 9 * 8 * (7 * 6 * 8 + (9 * 2 + 3 + 2 * 6))
(7 * 9 * 3 * 4 * 8) + 7 * 3 * (8 * 4 * (7 + 7 * 4 + 8 * 3) + (7 + 6 * 4) * 9 * 7)
9 * (9 + 3 * (7 + 4 * 9) + (5 + 9 * 2 + 5)) * (5 + 8 * 8)
8 * (6 + (7 + 8) + 8 * 4 + 7) + 7
2 + ((6 * 8 + 5 + 2 + 8) * 5 + 8) + 9
(6 * 2 + 7 * 8 + 4 + 7) + 5 * 7 + 7 * 3
2 * 4 * 4 + (4 * 6 + (9 * 5 * 5 * 5 + 8) * 6)
4 * 7 * 9 + ((2 + 3) * 2 + 2 + 6 * (7 * 2)) + 7
2 + (9 * 6 + (3 * 3) + 3 + 4) * 2 * (8 + 7 * 6 + 4 + 5 * 3) + 8 * 2
7 * 7 * (4 * 6 * 5) + 8 + (2 * 2 + 4 + 2 * 8) * 3
8 * 6 + ((6 + 2 + 3 * 4) + 8)
5 + (4 + 9 * 3) * 4 * 9 + ((8 + 3 + 2 * 5 * 9 + 9) * 5 + 3 + (8 + 9) * 4 + 6) + 8
8 * 6 * 3 * (3 + 2 * 5) + (6 + 8 * 2 + 4) * 8
(2 * (2 * 6 + 3) * 6 + 5 + 7) + 9 + 4
7 * 2 * 3 * (3 + (7 + 2) + 4 * 5)
2 + 9 * 8 + (4 + 4 + 6 * 2) * (7 * 4) + 8
(5 * 4 + 6) + (2 + 5 * 3) * 7 + 5 * 2 + 5
7 * 5 + 9 * 8 * 3 + (5 + 3)
9 * (3 * 8 + 6 * 4 * (3 + 6 * 7 + 5)) + 8 * 3
6 * 4 * 9 * 6 + ((5 + 4) * (3 + 8 + 5 + 6))
(8 + 8) + 2 + 7 + 5 + 9
9 * 3 + 3 + (2 * 4 * (9 + 8 * 2 + 9 + 3) + 2 + 9 * 9)
4 * (2 * 3 + 9 + (2 + 3) * (6 + 2)) * 2 + 5 + (4 + 2 * 5 + 8 + (8 * 5 * 4) * 2) + 5
3 * 5 + 8 + ((9 + 4 + 8 + 4 * 5 + 7) + 6)
4 * (2 + 3) + (8 * 6 + 6 + 7 + (9 * 3 * 3 * 8 * 3)) + 5 * 5 * (2 + 7 * (6 + 5 * 6 + 3 + 4) + 5 + 9 + 2)
(9 * 4 + 2 + 6 + (4 + 8 * 8 + 9 + 3 * 5) + (8 * 8 * 4)) + ((8 + 2 * 7 + 9 * 4 * 7) * 7 + 6 + 3 * 2 + 8) * 2 * 9 * (8 + (6 + 8 + 8 * 5 * 9 * 8)) * 5
6 + 2 + (9 * 6 * 8) + (3 * 2 + (6 * 3 + 2 * 9))
5 * 3 * 3 * 6 * (2 * 5 * 9 * 8) * 9
2 * 8 + 2 * 3 + (6 * 4 * 3 + (6 + 3 * 7 + 2 * 8) * 4)
9 * (7 * 4 * 4 * 5 + 9 + 5) * 4 + 2 * (2 + 8)
7 * 5 + 6 + 4 + 5 + 3
(9 + 4 + 7 + 2) * 4 + 2 * 4 + (3 + 6 * 9 * (2 + 6 + 2 + 8) + 3 + 9) * 7
7 * 9 + (7 + 3) + 8 * (4 + 2 + 5) + 7
8 + 4 + (3 * 9 + 9 + (8 + 5 + 4 + 6 * 4) * 4 + 9)
(4 + 6 * (3 + 9 * 6 * 5 * 9 + 4) * (2 * 9 * 2 * 7) * (7 * 6 + 9 + 3)) + 6 * (6 + (7 * 8 * 3 + 4 * 6))
((7 * 9 * 4 * 4) * 8 * 7 + 8 + 9 + 5) + 9
7 * ((7 * 8 * 3) * 2 * (8 * 7 + 2) + (3 + 2 * 6 * 9) * 5 * 8) * 4
(6 * 9) + (7 + 6 + (5 + 9 + 6 + 7 + 4 * 6))
3 * 6 + 8 + 7 + (6 + (2 + 9 + 4 + 3))
(9 * 5 + 6 * 5 * 9 * (5 + 2 * 2 + 3)) * (7 + 3 + 2 + 4 * 3) + (6 * 3 * 7 + (3 + 6) * 3) * (6 + 7) + 7
5 + 3 + 6 * ((9 + 6 + 8 + 6 * 5) + 6 * 6 + 5 + 3 + (5 * 9))
9 + (5 + (8 * 8 * 8 * 5 + 8 * 9) * 5) * 7 + 8
(7 + 2 * 7 * 6) + 6 + 9 + 7
7 + 8 + ((5 * 6 * 2) * (4 * 5 * 7 + 8 * 8)) * (9 * 5 + 8 * (5 * 3 * 3 * 5 + 3 * 3) * 9 * 9) * 9 * 6
((8 * 5 + 6 * 6) + 2 + (4 + 2 * 2 * 9 * 7 * 7)) * (7 + 9) + (9 + 3 + 7 * 8 + 4) * 5`
